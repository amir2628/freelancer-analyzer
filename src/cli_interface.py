"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional
import argparse
import logging
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt
from rich.markdown import Markdown

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from src.data_processor import DataProcessor
from src.llm_service import LLMService
from src.query_analyzer import QueryAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

class FreelancerAnalysisCLI:
    """–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.console = Console()
        self.data_processor: Optional[DataProcessor] = None
        self.llm_service: Optional[LLMService] = None
        self.query_analyzer: Optional[QueryAnalyzer] = None
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            task1 = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤...", total=None)
            self.data_processor = DataProcessor()
            await self.data_processor.initialize()
            progress.update(task1, completed=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞
            task2 = progress.add_task("–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...", total=None)
            self.llm_service = LLMService()
            await self.llm_service.initialize()
            progress.update(task2, completed=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            task3 = progress.add_task("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...", total=None)
            self.query_analyzer = QueryAnalyzer(self.data_processor, self.llm_service)
            progress.update(task3, completed=True)
            
        self.initialized = True
        self.console.print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", style="green bold")
    
    def show_welcome(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        welcome_text = """
# üîç –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ç—Ä–µ–Ω–¥–∞—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤!

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
- –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
- –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
- –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –æ–ø—ã—Ç–∞ –Ω–∞ –¥–æ—Ö–æ–¥—ã
- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫

## –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—à–µ –¥–æ—Ö–æ–¥ —É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ?"
- "–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–æ—Ö–æ–¥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º?"
- "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏–ª –º–µ–Ω–µ–µ 100 –ø—Ä–æ–µ–∫—Ç–æ–≤?"
        """
        
        self.console.print(Panel(Markdown(welcome_text), title="–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", border_style="blue"))
    
    def show_dataset_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
        if not self.initialized:
            self.console.print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", style="red")
            return
        
        info = self.data_processor.get_dataset_info()
        
        table = Table(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", str(info.get("total_records", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
        table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫", str(len(info.get("columns", []))))
        table.add_row("–ö–æ–ª–æ–Ω–∫–∏", ", ".join(info.get("columns", [])[:5]) + "...")
        
        if "numeric_summary" in info and "earnings" in info["numeric_summary"]:
            earnings_stats = info["numeric_summary"]["earnings"]
            table.add_row("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥", f"${earnings_stats.get('mean', 0):.2f}")
            table.add_row("–ú–µ–¥–∏–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", f"${earnings_stats.get('50%', 0):.2f}")
            table.add_row("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", f"${earnings_stats.get('max', 0):.2f}")
        
        self.console.print(table)
    
    async def process_single_query(self, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        if not self.initialized:
            self.console.print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", style="red")
            return
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", total=None)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
                llm_available = self.llm_service.pipeline is not None
                progress.update(task, description=f"–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (LLM: {'‚úÖ' if llm_available else '‚ùå'})...")
                
                result = await self.query_analyzer.process_query(query)
                progress.update(task, completed=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                self.display_result(query, result, llm_available)
                
            except Exception as e:
                progress.update(task, completed=True)
                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", style="red")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.console.print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", style="yellow")
                self.console.print(f"‚Ä¢ LLM –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if self.llm_service.pipeline else '–ù–µ—Ç'}")
                self.console.print(f"‚Ä¢ –ú–æ–¥–µ–ª—å: {self.llm_service.model_name}")
                self.console.print(f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.llm_service.device}")
    
    def display_result(self, query: str, result: dict, llm_available: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        self.console.print(Panel(f"–í–æ–ø—Ä–æ—Å: {query}", title="–ó–∞–ø—Ä–æ—Å", border_style="blue"))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å LLM
        llm_status = "ü§ñ LLM –∞–∫—Ç–∏–≤–µ–Ω" if llm_available else "‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —à–∞–±–ª–æ–Ω—ã)"
        
        # –û—Ç–≤–µ—Ç
        confidence = result.get('confidence', 0) * 100
        answer_panel = Panel(
            result.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"),
            title=f"–û—Ç–≤–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%) ‚Ä¢ {llm_status}",
            border_style="green" if llm_available else "yellow"
        )
        self.console.print(answer_panel)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if result.get("data_summary") and isinstance(result["data_summary"], dict):
            summary = result["data_summary"].get("summary", {})
            if summary:
                info_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
                info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
                info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
                
                info_table.add_row("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π", str(summary.get("total_records", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))
                if summary.get("mean_earnings"):
                    info_table.add_row("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥", f"${summary['mean_earnings']:.2f}")
                if summary.get("median_earnings"):
                    info_table.add_row("–ú–µ–¥–∏–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥", f"${summary['median_earnings']:.2f}")
                
                self.console.print(info_table)
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tech_info = []
        if result.get("query_type"):
            tech_info.append(f"–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result['query_type']}")
        if result.get("question_id"):
            tech_info.append(f"ID –≤–æ–ø—Ä–æ—Å–∞: {result['question_id']}")
        if result.get("entities"):
            tech_info.append(f"–°—É—â–Ω–æ—Å—Ç–∏: {', '.join(result['entities'])}")
        if result.get("metrics"):
            tech_info.append(f"–ú–µ—Ç—Ä–∏–∫–∏: {', '.join(result['metrics'])}")
        
        if tech_info:
            self.console.print(f"[dim]üîß {' ‚Ä¢ '.join(tech_info)}[/dim]")
        
        self.console.print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    async def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
        self.console.print("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", style="blue bold")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'exit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –∏–ª–∏ 'help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
        self.console.print()
        
        while True:
            try:
                query = Prompt.ask("\n[bold blue]–í–∞—à –≤–æ–ø—Ä–æ—Å[/bold blue]")
                
                if query.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    self.console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
                    break
                
                elif query.lower() in ['–ø–æ–º–æ—â—å', 'help', 'h']:
                    self.show_help()
                    continue
                
                elif query.lower() in ['info', '–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']:
                    self.show_dataset_info()
                    continue
                
                elif query.lower() in ['–ø—Ä–∏–º–µ—Ä—ã', 'examples']:
                    await self.show_examples()
                    continue
                
                elif query.lower() in ['debug', '–æ—Ç–ª–∞–¥–∫–∞', '–¥–∞–Ω–Ω—ã–µ']:
                    await self.show_debug_info()
                    continue
                
                elif len(query.strip()) < 3:
                    self.console.print("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", style="red")
                    continue
                
                await self.process_single_query(query)
                
            except KeyboardInterrupt:
                self.console.print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="yellow")
                break
            except Exception as e:
                self.console.print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
    
    def show_help(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """
## –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤

### –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- **–≤—ã—Ö–æ–¥/exit** - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
- **–ø–æ–º–æ—â—å/help** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- **–∏–Ω—Ñ–æ/info** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
- **–ø—Ä–∏–º–µ—Ä—ã/examples** - –ø–æ–∫–∞–∑–∞—Ç—å 10 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- **–æ—Ç–ª–∞–¥–∫–∞/debug** - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö

### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±:**
1. –í–≤–µ–¥–∏—Ç–µ **–ø—Ä–∏–º–µ—Ä—ã** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 10 –≥–æ—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (1-10) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
3. –°–∏—Å—Ç–µ–º–∞ –¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

**10 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:**
1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ vs –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
2. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤
3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
4. –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞
5. –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º
6. –í–ª–∏—è–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –¥–æ—Ö–æ–¥
7. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
8. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
9. –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
10. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ:**
- –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
- –ò–ò –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
```
> –ø—Ä–∏–º–µ—Ä—ã          # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
> 1                # –í—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Ññ1
> 5                # –í—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Ññ5
> –ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –ö–∞–Ω–∞–¥–µ?  # –°–≤–æ–π –≤–æ–ø—Ä–æ—Å
```
        """
        
        self.console.print(Panel(Markdown(help_text), title="–°–ø—Ä–∞–≤–∫–∞", border_style="yellow"))
    
    async def show_debug_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.initialized:
            self.console.print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", style="red")
            return
        
        df = self.data_processor.df
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_table = Table(title="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        info_table.add_row("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", str(len(df)))
        info_table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫", str(len(df.columns)))
        info_table.add_row("–ö–æ–ª–æ–Ω–∫–∏", ", ".join(df.columns))
        
        self.console.print(info_table)
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        if 'payment_method' in df.columns:
            payment_table = Table(title="–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
            payment_table.add_column("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", style="yellow")
            payment_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
            
            payment_counts = df['payment_method'].value_counts()
            for method, count in payment_counts.head(10).items():
                payment_table.add_row(str(method), str(count))
            
            self.console.print(payment_table)
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≤—ã–∫–æ–≤
        if 'skill_level' in df.columns:
            skill_table = Table(title="–£—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö")
            skill_table.add_column("–£—Ä–æ–≤–µ–Ω—å", style="yellow")
            skill_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
            
            skill_counts = df['skill_level'].value_counts()
            for level, count in skill_counts.head(10).items():
                skill_table.add_row(str(level), str(count))
            
            self.console.print(skill_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º
        if 'earnings' in df.columns:
            earnings_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤")
            earnings_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
            earnings_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
            
            earnings_table.add_row("–ú–∏–Ω–∏–º—É–º", f"${df['earnings'].min():.2f}")
            earnings_table.add_row("–ú–∞–∫—Å–∏–º—É–º", f"${df['earnings'].max():.2f}")
            earnings_table.add_row("–°—Ä–µ–¥–Ω–µ–µ", f"${df['earnings'].mean():.2f}")
            earnings_table.add_row("–ú–µ–¥–∏–∞–Ω–∞", f"${df['earnings'].median():.2f}")
            earnings_table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", str(df['earnings'].count()))
            
            self.console.print(earnings_table)

    async def show_examples(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞"""
        if not self.initialized:
            self.console.print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", style="red")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        examples_data = await self.query_analyzer.get_suggested_queries()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.console.print(Panel("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", border_style="blue"))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        table = Table(title="10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤")
        table.add_column("‚Ññ", style="cyan", width=4)
        table.add_column("–í–æ–ø—Ä–æ—Å", style="green", width=80)
        table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="yellow", width=20)
        table.add_column("–°–ª–æ–∂–Ω–æ—Å—Ç—å", style="magenta", width=10)
        
        for question in examples_data:
            table.add_row(
                str(question["id"]), 
                question["question"], 
                question["category"],
                question["difficulty"]
            )
        
        self.console.print(table)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        self.console.print("\nüí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (1-10) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    
    async def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        self.console.print("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", style="blue bold")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –∏–ª–∏ 'exit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –∏–ª–∏ 'help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ '–ø—Ä–∏–º–µ—Ä—ã' –∏–ª–∏ 'examples' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        self.console.print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.show_examples()
        
        while True:
            try:
                user_input = Prompt.ask("\n[bold blue]–í–∞—à –≤—ã–±–æ—Ä[/bold blue]")
                
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    self.console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
                    break
                
                elif user_input.lower() in ['–ø–æ–º–æ—â—å', 'help', 'h']:
                    self.show_help()
                    continue
                
                elif user_input.lower() in ['info', '–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']:
                    self.show_dataset_info()
                    continue
                
                elif user_input.lower() in ['–ø—Ä–∏–º–µ—Ä—ã', 'examples']:
                    await self.show_examples()
                    continue
                
                elif user_input.lower() in ['debug', '–æ—Ç–ª–∞–¥–∫–∞', '–¥–∞–Ω–Ω—ã–µ']:
                    await self.show_debug_info()
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                elif user_input.isdigit():
                    question_num = int(user_input)
                    if 1 <= question_num <= 10:
                        question = await self._get_question_by_number(question_num)
                        if question:
                            self.console.print(f"\n[bold green]–í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å #{question_num}:[/bold green]")
                            self.console.print(f"[italic]{question}[/italic]\n")
                            await self.process_single_query(question)
                        else:
                            self.console.print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", style="red")
                    else:
                        self.console.print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 10", style="red")
                    continue
                
                elif len(user_input.strip()) < 3:
                    self.console.print("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ (1-10) –∏–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.", style="red")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                await self.process_single_query(user_input)
                
            except KeyboardInterrupt:
                self.console.print("\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="yellow")
                break
            except Exception as e:
                self.console.print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")

    async def _get_question_by_number(self, number: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            questions = [
                "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—à–µ –¥–æ—Ö–æ–¥ —É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã?",
                "–ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–æ—Ö–æ–¥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?", 
                "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, —Å—á–∏—Ç–∞—é—â–∏—Ö —Å–µ–±—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏, –≤—ã–ø–æ–ª–Ω–∏–ª –º–µ–Ω–µ–µ 100 –ø—Ä–æ–µ–∫—Ç–æ–≤?",
                "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ —É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –æ–ø—ã—Ç–∞?",
                "–í –∫–∞–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ?",
                "–ö–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞?",
                "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?",
                "–ï—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É –Ω–æ–≤–∏—á–∫–∞–º–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö?",
                "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã?",  # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≤–æ–ø—Ä–æ—Å 9
                "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏?"
            ]
            
            if 1 <= number <= len(questions):
                return questions[number - 1]
            return None
        except Exception as e:
            self.console.print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}", style="red")
            return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤")
    parser.add_argument("--query", "-q", type=str, help="–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    parser.add_argument("--info", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
    parser.add_argument("--examples", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    args = parser.parse_args()
    
    cli = FreelancerAnalysisCLI()
    
    try:
        cli.show_welcome()
        await cli.initialize()
        
        if args.info:
            cli.show_dataset_info()
        elif args.examples:
            await cli.show_examples()
        elif args.query:
            await cli.process_single_query(args.query)
        else:
            await cli.interactive_mode()
            
    except KeyboardInterrupt:
        cli.console.print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="yellow")
    except Exception as e:
        cli.console.print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", style="red bold")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())